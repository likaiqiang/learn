{"title":"RN通过Android Intent打开媒体及播放!","slug":"RN通过Android Intent打开媒体及播放!","date":"2023-11-21T20:24:56.000Z","updated":"2023-12-12T17:33:26.305Z","comments":true,"path":"api/articles/RN通过Android Intent打开媒体及播放!.json","excerpt":null,"covers":null,"content":"<p>最近在阅读lx-music-mobile的代码，原作者代码写的很好，我在他的基础上增加了下载与本地音乐播放功能，原作者不实现肯定有他的考虑，我恰好有这个需求而已。</p>\n<p>以上功能完成以后，我就想着能不能进一步直接在文件管理器中用lx.music打开某音乐，经过一番研究，发现在AndroidManifest.xml加上这些代码:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">    //...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.action.VIEW&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.category.APP_MUSIC&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">&quot;audio/*&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">&quot;application/ogg&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">&quot;application/x-ogg&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">&quot;application/itunes&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">&quot;content&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">&quot;file&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    //...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在文件管理器里面打开某音乐时，lx.music就会出现在可选择列表里。这样点击lx.music仅仅会唤起app而已，后面还需要实现“响应这个操作并播放音乐文件”。</p>\n<p>先说一下这个intent，以我的初步理解，这东西是android内部不同app之间进行通讯的，在文件管理器打开音乐文件时发送了一个intent，lx.music匹配到这个intent（参见intent-filter的规则）后，需要解析出intent里面的内容，由于播放器的逻辑是rn实现的，所以需要给rn发送一个事件，js那边通过DeviceEventEmitter监听这个事件拿到音乐文件真实的路径。</p>\n<p>这里的顺序很重要，需要js先通过DeviceEventEmitter监听这个事件，然后android发送这个事件，js那边才能收到。</p>\n<p>app冷启动时，首先启动MainActivity，依次执行onCreate onStart onResume这些生命周期，然后加载并执行js代码，执行完毕后，会初始化reactContext对象。在onCreate onStart onResume这些生命周期里是拿不到reactContext的，所以就需要这样的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ReactInstanceManager</span> <span class=\"variable\">reactInstanceManager</span> <span class=\"operator\">=</span> ((MainApplication) getApplication()).getReactNativeHost().getReactInstanceManager();</span><br><span class=\"line\">        reactInstanceManager.addReactInstanceEventListener(<span class=\"keyword\">new</span> <span class=\"title class_\">ReactInstanceManager</span>.ReactInstanceEventListener() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReactContextInitialized</span><span class=\"params\">(ReactContext context)</span> &#123;</span><br><span class=\"line\">            reactContext = context;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reactInstanceManager.hasStartedCreatingInitialContext()) &#123;</span><br><span class=\"line\">          reactContext = reactInstanceManager.getCurrentReactContext();</span><br><span class=\"line\">          <span class=\"comment\">// ReactContext已经创建完成，可以直接获取</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>reactContext不为null，说明js代码执行完毕，在android端执行:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)</span><br><span class=\"line\">          .emit(<span class=\"string\">&quot;onPathReceived&quot;</span>, event);</span><br></pre></td></tr></table></figure>\n<p>在js端，通过以下代码接收这个消息:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> eventListener = <span class=\"title class_\">DeviceEventEmitter</span>.<span class=\"title function_\">addListener</span>(<span class=\"string\">&#x27;onPathReceived&#x27;</span>, <span class=\"function\"><span class=\"params\">eventParams</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，刚才说android会在js执行完毕后初始化reactContext对象，这里的“执行完毕”具体指的是什么，都执行了哪些代码。假如是在浏览器上，一个标准的react组件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">app</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>a page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个组件是如何渲染到浏览器上的？首先会执行render函数，把虚拟dom转换成真实的dom挂载到浏览器上，dom只是浏览器内部的一种数据结构，真正把画面渲染出来是浏览器做的工作，浏览器渲染完毕，会执行useEffect的回调函数。</p>\n<p>在react-native上，js的宿主环境不是浏览器，渲染工作是由原生完成的，由此可见，上面说的“执行完毕”仅仅执行了render函数，所以不能把DeviceEventEmitter.addListener放在useEffect里面，应该更提前，比如放在组件外面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> eventListener = <span class=\"title class_\">DeviceEventEmitter</span>.<span class=\"title function_\">addListener</span>(<span class=\"string\">&#x27;onPathReceived&#x27;</span>, <span class=\"function\"><span class=\"params\">eventParams</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">global</span>.<span class=\"property\">event</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;onPathReceived&#x27;</span>,eventParams.<span class=\"property\">path</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">app</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">global</span>.<span class=\"property\">event</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;onPathReceived&#x27;</span>,<span class=\"function\"><span class=\"params\">path</span>=&gt;</span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>a page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样又带来一个问题，当onPathReceived触发时，很可能涉及音乐播放的组件还没有渲染（比如有的组件是动态加载的），即使发射了onPathReceived事件，也没有任何响应，这里可以设置一个缓存，比如这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Event</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">cache</span>: <span class=\"title class_\">Map</span>&lt;string, <span class=\"title class_\">Array</span>&lt;any&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"params\">eventName: string, listener: (...args: any[]) =&gt; any</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查缓存中是否有提前 emit 的事件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cachedEvents = <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">get</span>(eventName)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cachedEvents) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> args <span class=\"keyword\">of</span> cachedEvents) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">listener</span>(...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">delete</span>(eventName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">emit</span>(<span class=\"params\">eventName: string, ...args: any[]</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有监听器，将事件保存到缓存中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span>.<span class=\"title function_\">has</span>(eventName)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cachedEvents = <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">get</span>(eventName)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!cachedEvents) <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">set</span>(eventName, cachedEvents = [])</span><br><span class=\"line\">      cachedEvents.<span class=\"title function_\">push</span>(args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就ok了。</p>\n","more":"<p>最近在阅读lx-music-mobile的代码，原作者代码写的很好，我在他的基础上增加了下载与本地音乐播放功能，原作者不实现肯定有他的考虑，我恰好有这个需求而已。</p>\n<p>以上功能完成以后，我就想着能不能进一步直接在文件管理器中用lx.music打开某音乐，经过一番研究，发现在AndroidManifest.xml加上这些代码:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">    //...</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.action.VIEW&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.category.APP_MUSIC&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">&quot;audio/*&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">&quot;application/ogg&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">&quot;application/x-ogg&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">&quot;application/itunes&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">&quot;content&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:scheme</span>=<span class=\"string\">&quot;file&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    //...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在文件管理器里面打开某音乐时，lx.music就会出现在可选择列表里。这样点击lx.music仅仅会唤起app而已，后面还需要实现“响应这个操作并播放音乐文件”。</p>\n<p>先说一下这个intent，以我的初步理解，这东西是android内部不同app之间进行通讯的，在文件管理器打开音乐文件时发送了一个intent，lx.music匹配到这个intent（参见intent-filter的规则）后，需要解析出intent里面的内容，由于播放器的逻辑是rn实现的，所以需要给rn发送一个事件，js那边通过DeviceEventEmitter监听这个事件拿到音乐文件真实的路径。</p>\n<p>这里的顺序很重要，需要js先通过DeviceEventEmitter监听这个事件，然后android发送这个事件，js那边才能收到。</p>\n<p>app冷启动时，首先启动MainActivity，依次执行onCreate onStart onResume这些生命周期，然后加载并执行js代码，执行完毕后，会初始化reactContext对象。在onCreate onStart onResume这些生命周期里是拿不到reactContext的，所以就需要这样的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ReactInstanceManager</span> <span class=\"variable\">reactInstanceManager</span> <span class=\"operator\">=</span> ((MainApplication) getApplication()).getReactNativeHost().getReactInstanceManager();</span><br><span class=\"line\">        reactInstanceManager.addReactInstanceEventListener(<span class=\"keyword\">new</span> <span class=\"title class_\">ReactInstanceManager</span>.ReactInstanceEventListener() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onReactContextInitialized</span><span class=\"params\">(ReactContext context)</span> &#123;</span><br><span class=\"line\">            reactContext = context;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reactInstanceManager.hasStartedCreatingInitialContext()) &#123;</span><br><span class=\"line\">          reactContext = reactInstanceManager.getCurrentReactContext();</span><br><span class=\"line\">          <span class=\"comment\">// ReactContext已经创建完成，可以直接获取</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>reactContext不为null，说明js代码执行完毕，在android端执行:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)</span><br><span class=\"line\">          .emit(<span class=\"string\">&quot;onPathReceived&quot;</span>, event);</span><br></pre></td></tr></table></figure>\n<p>在js端，通过以下代码接收这个消息:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> eventListener = <span class=\"title class_\">DeviceEventEmitter</span>.<span class=\"title function_\">addListener</span>(<span class=\"string\">&#x27;onPathReceived&#x27;</span>, <span class=\"function\"><span class=\"params\">eventParams</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，刚才说android会在js执行完毕后初始化reactContext对象，这里的“执行完毕”具体指的是什么，都执行了哪些代码。假如是在浏览器上，一个标准的react组件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">app</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>a page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个组件是如何渲染到浏览器上的？首先会执行render函数，把虚拟dom转换成真实的dom挂载到浏览器上，dom只是浏览器内部的一种数据结构，真正把画面渲染出来是浏览器做的工作，浏览器渲染完毕，会执行useEffect的回调函数。</p>\n<p>在react-native上，js的宿主环境不是浏览器，渲染工作是由原生完成的，由此可见，上面说的“执行完毕”仅仅执行了render函数，所以不能把DeviceEventEmitter.addListener放在useEffect里面，应该更提前，比如放在组件外面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> eventListener = <span class=\"title class_\">DeviceEventEmitter</span>.<span class=\"title function_\">addListener</span>(<span class=\"string\">&#x27;onPathReceived&#x27;</span>, <span class=\"function\"><span class=\"params\">eventParams</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">global</span>.<span class=\"property\">event</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;onPathReceived&#x27;</span>,eventParams.<span class=\"property\">path</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">app</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">global</span>.<span class=\"property\">event</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;onPathReceived&#x27;</span>,<span class=\"function\"><span class=\"params\">path</span>=&gt;</span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>a page<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样又带来一个问题，当onPathReceived触发时，很可能涉及音乐播放的组件还没有渲染（比如有的组件是动态加载的），即使发射了onPathReceived事件，也没有任何响应，这里可以设置一个缓存，比如这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Event</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">cache</span>: <span class=\"title class_\">Map</span>&lt;string, <span class=\"title class_\">Array</span>&lt;any&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"params\">eventName: string, listener: (...args: any[]) =&gt; any</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查缓存中是否有提前 emit 的事件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cachedEvents = <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">get</span>(eventName)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cachedEvents) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> args <span class=\"keyword\">of</span> cachedEvents) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">listener</span>(...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">delete</span>(eventName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">emit</span>(<span class=\"params\">eventName: string, ...args: any[]</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有监听器，将事件保存到缓存中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span>.<span class=\"title function_\">has</span>(eventName)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cachedEvents = <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">get</span>(eventName)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!cachedEvents) <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">set</span>(eventName, cachedEvents = [])</span><br><span class=\"line\">      cachedEvents.<span class=\"title function_\">push</span>(args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就ok了。</p>\n","categories":[],"tags":[]}