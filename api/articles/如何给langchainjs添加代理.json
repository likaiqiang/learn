{"title":"如何给langchainjs添加代理","slug":"如何给langchainjs添加代理","date":"2023-12-12T19:42:10.000Z","updated":"2023-12-12T13:24:37.847Z","comments":true,"path":"api/articles/如何给langchainjs添加代理.json","excerpt":null,"covers":null,"content":"<p>langchain这个框架是个好东西，本以为又是python的天下，没想到竟然有js版本，不过openai毕竟是国外的嘛，能否配置代理对我们这些渴望高质量服务的国人来说至关重要。</p>\n<p>你要是用clash，这个软件有个虚拟网卡模式，开启后，电脑上的所有流量都会走这个虚拟网卡，但是毕竟是国人，老是开虚拟网卡有点不方便。</p>\n<p>langchainjs更新很快，老版本可以用以下的方式配置proxy。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> llm = <span class=\"keyword\">new</span> <span class=\"title class_\">OpenAI</span>(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">openAIApiKey</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// modelName: &#x27;gpt-3.5-turbo&#x27;,</span></span><br><span class=\"line\">      <span class=\"attr\">modelName</span>: <span class=\"string\">&#x27;text-davinci-003&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// modelName: &#x27;code-davinci-002&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">// modelName: &#x27;code-davinci-001&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">// modelName: &#x27;gpt-4&#x27;,</span></span><br><span class=\"line\">      <span class=\"attr\">temperature</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">verbose</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">baseOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">httpAgent</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpsProxyAgent</span>(<span class=\"string\">&#x27;http://a:30010&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">httpsAgent</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpsProxyAgent</span>(<span class=\"string\">&#x27;http://a:30010&#x27;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p>这种方式已经失效了（0.0.198），新版本推荐以下的方式配置代理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> model = <span class=\"keyword\">new</span> <span class=\"title class_\">ChatOpenAI</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">temperature</span>: <span class=\"number\">0</span>, <span class=\"comment\">// increase temperature to get more creative answers</span></span><br><span class=\"line\">    <span class=\"attr\">modelName</span>: <span class=\"string\">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">openAIApiKey</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//change this to gpt-4 if you have access</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    <span class=\"attr\">httpAgent</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpsProxyAgent</span>(proxy)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>不过就我用的node18.16.0来说，以上方式并不生效，为此，我大概翻了一下langchain的代码，并且找到了原因。</p>\n<p><a href=\"https://github.com/langchain-ai/langchainjs/blob/0.0.198/libs/langchain-openai/src/embeddings.ts#L258\">embeddings.ts L258</a>。以我用的embedding api为例子，看一下langchian内部是如何发起网络请求的，await this.client.embeddings.create这一句，这里的this.client是怎么来的，243行，this.client &#x3D; new OpenAIClient(params)，这里的OpenAIClient是openai这个js库导出的，所以langchianjs内部实际上调了openai-node。</p>\n<p><a href=\"https://github.com/openai/openai-node/blob/v4.20.1/src/core.ts#L480\">openai-node L480</a> 这里的fetch来自this.getRequestClient()，487行，getRequestClient返回的fetch来自this.fetch，184行，this.fetch &#x3D; overridenFetch ?? fetch，这里的overridenFetch是个实例参数，一般不会传的，所以最终的fetch来自<a href=\"https://github.com/openai/openai-node/blob/v4.20.1/src/_shims/index.js\">_shims<br>&#x2F;index.js</a> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Disclaimer: modules in _shims aren&#x27;t intended to be imported by SDK users.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> shims = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./registry&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> auto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;openai/_shims/auto/runtime&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!shims.<span class=\"property\">kind</span>) shims.<span class=\"title function_\">setShims</span>(auto.<span class=\"title function_\">getRuntime</span>(), &#123; <span class=\"attr\">auto</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> property <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(shims)) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, property, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> shims[property];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这几行代码其实不复杂，registry里面导出了一堆需要shims的方法或者属性，也包括fetch，这些东西最终会通过那个for循环+Object.defineProperty导出给外部使用，可以通过shims.setShims给这些方法或者属性打补丁。看看auto.getRuntime()的实现。</p>\n<p><a href=\"https://github.com/openai/openai-node/blob/v4.20.1/src/_shims/web-runtime.ts#L20\">web-runtime.ts L20</a> 20行这里的fetch赋值找不到定义，说明最终发起网络请求的fetch来自运行这段js的环境。</p>\n<p>我们知道fetch这个api是浏览器上用来替代XMLHttpRequest的，node环境想用一直用node-fetch这个库，但是从node18开始也实现了原生的fetch，，所以这就是httpAgent不生效的原因，因为nodejs18内置的fetch根本不支持传递httpAgent参数。它通过以下的方式配置代理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ProxyAgent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;undici&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dispatcher = <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyAgent</span>(<span class=\"string\">&#x27;https://proxy.com&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;google.com&#x27;</span>, &#123; </span><br><span class=\"line\">         dispatcher,</span><br><span class=\"line\">         <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">hi</span>: <span class=\"string\">&quot;mom&quot;</span> &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>很明显，这个dispatcher选项langchainjs没有给我们提供，那怎么办呢，我们可以通过刚才的overridenFetch覆盖掉默认的fetch检测，而这个参数langchainjs提供了。</p>\n<p><a href=\"https://github.com/langchain-ai/langchainjs/blob/0.0.198/libs/langchain-openai/src/embeddings.ts#L243\">embeddings.ts</a> 这里的configuration类型是ClientOptions，而ClientOptions来自openai-node，<a href=\"https://github.com/openai/openai-node/blob/v4.20.1/src/index.ts#L49\">fetch option</a> 这里的fetch就是上面说的overridenFetch，可以给这个参数赋值node-fetch，然后httpAgent参数就起作用了。所以最终的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fetch <span class=\"keyword\">from</span> <span class=\"string\">&#x27;node-fetch&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ChatOpenAI</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">temperature</span>: <span class=\"number\">0</span>, <span class=\"comment\">// increase temperature to get more creative answers</span></span><br><span class=\"line\">    <span class=\"attr\">modelName</span>: <span class=\"string\">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">openAIApiKey</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//change this to gpt-4 if you have access</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    <span class=\"attr\">httpAgent</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpsProxyAgent</span>(proxy),</span><br><span class=\"line\">    fetch</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","more":"<p>langchain这个框架是个好东西，本以为又是python的天下，没想到竟然有js版本，不过openai毕竟是国外的嘛，能否配置代理对我们这些渴望高质量服务的国人来说至关重要。</p>\n<p>你要是用clash，这个软件有个虚拟网卡模式，开启后，电脑上的所有流量都会走这个虚拟网卡，但是毕竟是国人，老是开虚拟网卡有点不方便。</p>\n<p>langchainjs更新很快，老版本可以用以下的方式配置proxy。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> llm = <span class=\"keyword\">new</span> <span class=\"title class_\">OpenAI</span>(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">openAIApiKey</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// modelName: &#x27;gpt-3.5-turbo&#x27;,</span></span><br><span class=\"line\">      <span class=\"attr\">modelName</span>: <span class=\"string\">&#x27;text-davinci-003&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// modelName: &#x27;code-davinci-002&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">// modelName: &#x27;code-davinci-001&#x27;,</span></span><br><span class=\"line\">      <span class=\"comment\">// modelName: &#x27;gpt-4&#x27;,</span></span><br><span class=\"line\">      <span class=\"attr\">temperature</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">verbose</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">baseOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">proxy</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">httpAgent</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpsProxyAgent</span>(<span class=\"string\">&#x27;http://a:30010&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">httpsAgent</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpsProxyAgent</span>(<span class=\"string\">&#x27;http://a:30010&#x27;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p>这种方式已经失效了（0.0.198），新版本推荐以下的方式配置代理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> model = <span class=\"keyword\">new</span> <span class=\"title class_\">ChatOpenAI</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">temperature</span>: <span class=\"number\">0</span>, <span class=\"comment\">// increase temperature to get more creative answers</span></span><br><span class=\"line\">    <span class=\"attr\">modelName</span>: <span class=\"string\">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">openAIApiKey</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//change this to gpt-4 if you have access</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    <span class=\"attr\">httpAgent</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpsProxyAgent</span>(proxy)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>不过就我用的node18.16.0来说，以上方式并不生效，为此，我大概翻了一下langchain的代码，并且找到了原因。</p>\n<p><a href=\"https://github.com/langchain-ai/langchainjs/blob/0.0.198/libs/langchain-openai/src/embeddings.ts#L258\">embeddings.ts L258</a>。以我用的embedding api为例子，看一下langchian内部是如何发起网络请求的，await this.client.embeddings.create这一句，这里的this.client是怎么来的，243行，this.client &#x3D; new OpenAIClient(params)，这里的OpenAIClient是openai这个js库导出的，所以langchianjs内部实际上调了openai-node。</p>\n<p><a href=\"https://github.com/openai/openai-node/blob/v4.20.1/src/core.ts#L480\">openai-node L480</a> 这里的fetch来自this.getRequestClient()，487行，getRequestClient返回的fetch来自this.fetch，184行，this.fetch &#x3D; overridenFetch ?? fetch，这里的overridenFetch是个实例参数，一般不会传的，所以最终的fetch来自<a href=\"https://github.com/openai/openai-node/blob/v4.20.1/src/_shims/index.js\">_shims<br>&#x2F;index.js</a> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Disclaimer: modules in _shims aren&#x27;t intended to be imported by SDK users.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> shims = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./registry&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> auto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;openai/_shims/auto/runtime&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!shims.<span class=\"property\">kind</span>) shims.<span class=\"title function_\">setShims</span>(auto.<span class=\"title function_\">getRuntime</span>(), &#123; <span class=\"attr\">auto</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> property <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(shims)) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, property, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> shims[property];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这几行代码其实不复杂，registry里面导出了一堆需要shims的方法或者属性，也包括fetch，这些东西最终会通过那个for循环+Object.defineProperty导出给外部使用，可以通过shims.setShims给这些方法或者属性打补丁。看看auto.getRuntime()的实现。</p>\n<p><a href=\"https://github.com/openai/openai-node/blob/v4.20.1/src/_shims/web-runtime.ts#L20\">web-runtime.ts L20</a> 20行这里的fetch赋值找不到定义，说明最终发起网络请求的fetch来自运行这段js的环境。</p>\n<p>我们知道fetch这个api是浏览器上用来替代XMLHttpRequest的，node环境想用一直用node-fetch这个库，但是从node18开始也实现了原生的fetch，，所以这就是httpAgent不生效的原因，因为nodejs18内置的fetch根本不支持传递httpAgent参数。它通过以下的方式配置代理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ProxyAgent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;undici&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dispatcher = <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyAgent</span>(<span class=\"string\">&#x27;https://proxy.com&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;google.com&#x27;</span>, &#123; </span><br><span class=\"line\">         dispatcher,</span><br><span class=\"line\">         <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">hi</span>: <span class=\"string\">&quot;mom&quot;</span> &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>很明显，这个dispatcher选项langchainjs没有给我们提供，那怎么办呢，我们可以通过刚才的overridenFetch覆盖掉默认的fetch检测，而这个参数langchainjs提供了。</p>\n<p><a href=\"https://github.com/langchain-ai/langchainjs/blob/0.0.198/libs/langchain-openai/src/embeddings.ts#L243\">embeddings.ts</a> 这里的configuration类型是ClientOptions，而ClientOptions来自openai-node，<a href=\"https://github.com/openai/openai-node/blob/v4.20.1/src/index.ts#L49\">fetch option</a> 这里的fetch就是上面说的overridenFetch，可以给这个参数赋值node-fetch，然后httpAgent参数就起作用了。所以最终的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fetch <span class=\"keyword\">from</span> <span class=\"string\">&#x27;node-fetch&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ChatOpenAI</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">temperature</span>: <span class=\"number\">0</span>, <span class=\"comment\">// increase temperature to get more creative answers</span></span><br><span class=\"line\">    <span class=\"attr\">modelName</span>: <span class=\"string\">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">openAIApiKey</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//change this to gpt-4 if you have access</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    <span class=\"attr\">httpAgent</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">HttpsProxyAgent</span>(proxy),</span><br><span class=\"line\">    fetch</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","categories":[],"tags":[]}