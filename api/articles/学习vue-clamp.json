{"title":"学习vue-clamp","slug":"学习vue-clamp","date":"2021-12-21T22:34:11.000Z","updated":"2023-06-25T04:49:07.115Z","comments":true,"path":"api/articles/学习vue-clamp.json","excerpt":null,"covers":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"https://github.com/Justineo/vue-clamp\">项目地址</a></p>\n<p>无意间看到这个库，利用getClientRects与二分法实现多行文字的超出截断，虽说flex更简洁，但是想起我n年前兼容IE时的痛楚，虽说现在不用兼容IE了，但是原理什么的还是忍不住瞅一眼。</p>\n<p>关键是知不知道<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getClientRects\">getClientRects</a> 。这玩意兼容性好强大。假如是行内元素调用getClientRects，会返回一个rects集合，这个集合的length就是文本的行数，好简洁，完全不用关心行高什么的。</p>\n<h1 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h1><ol>\n<li>tag: 由于内部是由render函数生成的vnode，比起template，tag是可以变的，默认是div。</li>\n<li>autoresize: 内部使用resize-detector这个库监听组件的resize事件，size变化时，更新截断状态。</li>\n<li>max-lines: 最大行数</li>\n<li>max-height: 最大高度。max-height与max-lines指定一个即可。</li>\n<li>ellipsis: 省略符号，默认…</li>\n<li>location: ellipsis的位置，默认end。</li>\n<li>expanded: 初始状态是否展开，默认false。</li>\n</ol>\n<p>slot</p>\n<ol>\n<li>default：默认插槽为文本的实际内容（非展示内容）。</li>\n<li>after&#x2F;before：这俩插槽取其一，关于它们的slot scope后面会说。</li>\n</ol>\n<h1 id=\"用代码简述原理\"><a href=\"#用代码简述原理\" class=\"headerlink\" title=\"用代码简述原理\"></a>用代码简述原理</h1><p>vue组件不好解释，语法灵活&#x2F;随意，各种数据自动响应，计算属性什么的互相依赖，读起来挺爽的，给别人解释可太难了。所以我先写个小而美的clamp，方便理解核心原理。</p>\n<figure class=\"highlight typescript\"><figcaption><span>jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">lines</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span><br><span class=\"line\">          <span class=\"attr\">default</span>: <span class=\"number\">3</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>:<span class=\"variable language_\">this</span>.<span class=\"title function_\">getText</span>(),</span><br><span class=\"line\">            <span class=\"attr\">offsetSet</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">getText</span>().<span class=\"property\">length</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [content] = <span class=\"variable language_\">this</span>.<span class=\"property\">$slots</span>.<span class=\"property\">default</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;content&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">isOverflow</span>())&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">search</span>(<span class=\"params\"><span class=\"keyword\">from</span>=<span class=\"number\">0</span>,to=<span class=\"variable language_\">this</span>.text.length</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(to-<span class=\"keyword\">from</span>&lt;=<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;done&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">offset</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((<span class=\"keyword\">from</span> + to) / <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">text</span>.<span class=\"property\">textContent</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">text</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">offset</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">isOverflow</span>())&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>(<span class=\"keyword\">from</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">offset</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">offset</span>,to)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">getText</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> [content] = (<span class=\"variable language_\">this</span>.<span class=\"property\">$slots</span>.<span class=\"property\">default</span> || []).<span class=\"title function_\">filter</span>(</span><br><span class=\"line\">                <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> !node.<span class=\"property\">tag</span> &amp;&amp; !node.<span class=\"property\">isComment</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> content ? content.<span class=\"property\">text</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">getLines</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">text</span>.<span class=\"title function_\">getClientRects</span>().<span class=\"property\">length</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">isOverflow</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLines</span>() &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">lines</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有一个props（lines：表示文本的行数），data里面有两个属性text与offset，text表示原始的文本，offset是个信标，表示发生截断的位置，只要offset不等于text的长度，就认为文本发生了截断。</p>\n<p>render函数里面拿到了默认插槽的vnode，并用span渲染出来，为什么是span，因为只有行内元素调用getClientRects才会返回文本长度。从这里还可以看出，插槽与渲染竟然可以分开！！<br>第一次渲染会渲染出全部文本，在mounted里面通过isOverflow判断是否溢出，即文本的实际行数是否大于props.lines，如果发生了溢出，调用search方法，search方法使用了二分法不停的改变offset的位置，直到from与to的差值小于等于3，为什么是3呢，我猜是省略号(…)的长度，这样就算出了最佳的offset以及最佳的截断文本。</p>\n<h1 id=\"源码解读\"><a href=\"#源码解读\" class=\"headerlink\" title=\"源码解读\"></a>源码解读</h1><p>源码与我那个有什么不同：</p>\n<ol>\n<li>支持更多的props</li>\n<li>检测元素的尺寸是否发生变化</li>\n<li>支持更多的插槽</li>\n</ol>\n<p>可以自定义tag，设置是否检测元素的尺寸变化，是否以maxHeight代替maxLines，设置省略号的文本（默认是…），以及省略号的位置。expanded设置初次渲染是否展开文本.</p>\n<p>先从render函数看起。<br><a href=\"https://github.com/Justineo/vue-clamp/blob/master/src/components/Clamp.js#L227\">render</a><br>整体来看，多了before与after插槽的逻辑，before与after取其一。值得注意的是this.$scopedSlots这个api，作用域插槽在render函数里面竟然是这样用的，scope就是传递给插槽的作用域，this.$scopedSlots.before&#x2F;afer(scope)的结果是vnode。然后竟然可以把组件的方法传给scope，又学到了。</p>\n<p>mounted调用init，init内部有一些是否检测元素尺寸变化的逻辑，用了resize-detector，这个库也是作者写的，init最终调用update。update开篇有个localExpanded，这个就是props.expanded，内部写了几个watch来同步两者的状态。然后调用search，和上面的精简版不一样的是多了个stepToFit方法，这个方法的作用是微调offset，即在用二分法得到最终的文本后，最后一行文本的长度可能不满一行，先调用fill方法使文本充满一行（可能发生换行），然后调用clamp方法使文本刚好充满一行。</p>\n<p>原理就是这样。看一下github上的demo。</p>\n<p>before&#x2F;after插槽是个button，点击button调用了toggle方法。</p>\n<figure class=\"highlight typescript\"><figcaption><span>jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toggle () &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">localExpanded</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">localExpanded</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这句话会触发localExpanded的watch</p>\n<figure class=\"highlight typescript\"><figcaption><span>jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (val) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">clampAt</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">text</span>.<span class=\"property\">length</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">update</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果localExpanded为true，还原文本，否则，重新截断文本。</p>\n<p>最后，值得注意的是mounted里面的watch写法</p>\n<figure class=\"highlight typescript\"><figcaption><span>jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$watch(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">vm</span>) =&gt;</span> [vm.<span class=\"property\">maxLines</span>, vm.<span class=\"property\">maxHeight</span>, vm.<span class=\"property\">ellipsis</span>, vm.<span class=\"property\">isClamped</span>].<span class=\"title function_\">join</span>(),</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">update</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$watch(<span class=\"function\">(<span class=\"params\">vm</span>) =&gt;</span> [vm.<span class=\"property\">tag</span>, vm.<span class=\"property\">text</span>, vm.<span class=\"property\">autoresize</span>].<span class=\"title function_\">join</span>(), <span class=\"variable language_\">this</span>.<span class=\"property\">init</span>)</span><br></pre></td></tr></table></figure>\n<p>又学到了，这种做法可以同时watch多个参数，执行相同的逻辑。</p>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"https://github.com/Justineo/vue-clamp\">项目地址</a></p>\n<p>无意间看到这个库，利用getClientRects与二分法实现多行文字的超出截断，虽说flex更简洁，但是想起我n年前兼容IE时的痛楚，虽说现在不用兼容IE了，但是原理什么的还是忍不住瞅一眼。</p>\n<p>关键是知不知道<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getClientRects\">getClientRects</a> 。这玩意兼容性好强大。假如是行内元素调用getClientRects，会返回一个rects集合，这个集合的length就是文本的行数，好简洁，完全不用关心行高什么的。</p>\n<h1 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h1><ol>\n<li>tag: 由于内部是由render函数生成的vnode，比起template，tag是可以变的，默认是div。</li>\n<li>autoresize: 内部使用resize-detector这个库监听组件的resize事件，size变化时，更新截断状态。</li>\n<li>max-lines: 最大行数</li>\n<li>max-height: 最大高度。max-height与max-lines指定一个即可。</li>\n<li>ellipsis: 省略符号，默认…</li>\n<li>location: ellipsis的位置，默认end。</li>\n<li>expanded: 初始状态是否展开，默认false。</li>\n</ol>\n<p>slot</p>\n<ol>\n<li>default：默认插槽为文本的实际内容（非展示内容）。</li>\n<li>after&#x2F;before：这俩插槽取其一，关于它们的slot scope后面会说。</li>\n</ol>\n<h1 id=\"用代码简述原理\"><a href=\"#用代码简述原理\" class=\"headerlink\" title=\"用代码简述原理\"></a>用代码简述原理</h1><p>vue组件不好解释，语法灵活&#x2F;随意，各种数据自动响应，计算属性什么的互相依赖，读起来挺爽的，给别人解释可太难了。所以我先写个小而美的clamp，方便理解核心原理。</p>\n<figure class=\"highlight typescript\"><figcaption><span>jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">lines</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span><br><span class=\"line\">          <span class=\"attr\">default</span>: <span class=\"number\">3</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>:<span class=\"variable language_\">this</span>.<span class=\"title function_\">getText</span>(),</span><br><span class=\"line\">            <span class=\"attr\">offsetSet</span>: <span class=\"variable language_\">this</span>.<span class=\"title function_\">getText</span>().<span class=\"property\">length</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [content] = <span class=\"variable language_\">this</span>.<span class=\"property\">$slots</span>.<span class=\"property\">default</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;content&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">isOverflow</span>())&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">search</span>(<span class=\"params\"><span class=\"keyword\">from</span>=<span class=\"number\">0</span>,to=<span class=\"variable language_\">this</span>.text.length</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(to-<span class=\"keyword\">from</span>&lt;=<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;done&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">offset</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((<span class=\"keyword\">from</span> + to) / <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">text</span>.<span class=\"property\">textContent</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">text</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">offset</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">isOverflow</span>())&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>(<span class=\"keyword\">from</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">offset</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">offset</span>,to)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">getText</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> [content] = (<span class=\"variable language_\">this</span>.<span class=\"property\">$slots</span>.<span class=\"property\">default</span> || []).<span class=\"title function_\">filter</span>(</span><br><span class=\"line\">                <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> !node.<span class=\"property\">tag</span> &amp;&amp; !node.<span class=\"property\">isComment</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> content ? content.<span class=\"property\">text</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">getLines</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">text</span>.<span class=\"title function_\">getClientRects</span>().<span class=\"property\">length</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">isOverflow</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLines</span>() &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">lines</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有一个props（lines：表示文本的行数），data里面有两个属性text与offset，text表示原始的文本，offset是个信标，表示发生截断的位置，只要offset不等于text的长度，就认为文本发生了截断。</p>\n<p>render函数里面拿到了默认插槽的vnode，并用span渲染出来，为什么是span，因为只有行内元素调用getClientRects才会返回文本长度。从这里还可以看出，插槽与渲染竟然可以分开！！<br>第一次渲染会渲染出全部文本，在mounted里面通过isOverflow判断是否溢出，即文本的实际行数是否大于props.lines，如果发生了溢出，调用search方法，search方法使用了二分法不停的改变offset的位置，直到from与to的差值小于等于3，为什么是3呢，我猜是省略号(…)的长度，这样就算出了最佳的offset以及最佳的截断文本。</p>\n<h1 id=\"源码解读\"><a href=\"#源码解读\" class=\"headerlink\" title=\"源码解读\"></a>源码解读</h1><p>源码与我那个有什么不同：</p>\n<ol>\n<li>支持更多的props</li>\n<li>检测元素的尺寸是否发生变化</li>\n<li>支持更多的插槽</li>\n</ol>\n<p>可以自定义tag，设置是否检测元素的尺寸变化，是否以maxHeight代替maxLines，设置省略号的文本（默认是…），以及省略号的位置。expanded设置初次渲染是否展开文本.</p>\n<p>先从render函数看起。<br><a href=\"https://github.com/Justineo/vue-clamp/blob/master/src/components/Clamp.js#L227\">render</a><br>整体来看，多了before与after插槽的逻辑，before与after取其一。值得注意的是this.$scopedSlots这个api，作用域插槽在render函数里面竟然是这样用的，scope就是传递给插槽的作用域，this.$scopedSlots.before&#x2F;afer(scope)的结果是vnode。然后竟然可以把组件的方法传给scope，又学到了。</p>\n<p>mounted调用init，init内部有一些是否检测元素尺寸变化的逻辑，用了resize-detector，这个库也是作者写的，init最终调用update。update开篇有个localExpanded，这个就是props.expanded，内部写了几个watch来同步两者的状态。然后调用search，和上面的精简版不一样的是多了个stepToFit方法，这个方法的作用是微调offset，即在用二分法得到最终的文本后，最后一行文本的长度可能不满一行，先调用fill方法使文本充满一行（可能发生换行），然后调用clamp方法使文本刚好充满一行。</p>\n<p>原理就是这样。看一下github上的demo。</p>\n<p>before&#x2F;after插槽是个button，点击button调用了toggle方法。</p>\n<figure class=\"highlight typescript\"><figcaption><span>jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toggle () &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">localExpanded</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">localExpanded</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这句话会触发localExpanded的watch</p>\n<figure class=\"highlight typescript\"><figcaption><span>jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (val) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">clampAt</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">text</span>.<span class=\"property\">length</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">update</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果localExpanded为true，还原文本，否则，重新截断文本。</p>\n<p>最后，值得注意的是mounted里面的watch写法</p>\n<figure class=\"highlight typescript\"><figcaption><span>jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$watch(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">vm</span>) =&gt;</span> [vm.<span class=\"property\">maxLines</span>, vm.<span class=\"property\">maxHeight</span>, vm.<span class=\"property\">ellipsis</span>, vm.<span class=\"property\">isClamped</span>].<span class=\"title function_\">join</span>(),</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">update</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$watch(<span class=\"function\">(<span class=\"params\">vm</span>) =&gt;</span> [vm.<span class=\"property\">tag</span>, vm.<span class=\"property\">text</span>, vm.<span class=\"property\">autoresize</span>].<span class=\"title function_\">join</span>(), <span class=\"variable language_\">this</span>.<span class=\"property\">init</span>)</span><br></pre></td></tr></table></figure>\n<p>又学到了，这种做法可以同时watch多个参数，执行相同的逻辑。</p>\n","categories":[],"tags":[]}