{"title":"手写promise","slug":"手写promise","date":"2023-06-21T22:37:56.000Z","updated":"2023-11-21T14:19:22.813Z","comments":true,"path":"api/articles/手写promise.json","excerpt":null,"covers":null,"content":"<p>Promise这个构造函数与别的不一样，尽管平时使用时比较爽，但是站在函数设计者的角度来看就比较怪异。首先构造函数的参数是个函数（executor），这个函数的两个参数resolve与reject又是两个函数，且是在Promise构造函数内部定义的，调用executor时需要作为executor的参数。</p>\n<p>Promise的then方法的参数又是两个函数（onFulfilled与onRejected），这两函数会在该promise实例resolve或者reject时分别调用，且then方法还可以链式调用与值穿透。看起来很像一堆函数在互相作用，但Promise的用法却是面向对象的方式，所以容易让人困惑。</p>\n<p>先不考虑then方法的链式调用与值穿透，实现一个简易版的promise。</p>\n<h1 id=\"一个普通的不支持链式调用的promise\"><a href=\"#一个普通的不支持链式调用的promise\" class=\"headerlink\" title=\"一个普通的不支持链式调用的promise\"></a>一个普通的不支持链式调用的promise</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span>(<span class=\"params\">executor</span>)&#123; <span class=\"comment\">// 这个executor便是我们new Promise时传的函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span> <span class=\"comment\">// promise实例resolve时的值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span> <span class=\"comment\">// promise实例reject时的原因</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&#x27;pending&#x27;</span> <span class=\"comment\">// promise实例的状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span> = [] <span class=\"comment\">//用来存储then方法的onFulfilled方法，因为then方法可以被链式调用，所以这个参数是个数组。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span> = [] <span class=\"comment\">//用来存储then方法的onRejected方法，因为then方法可以被链式调用，所以这个参数是个数组。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">            self.<span class=\"property\">status</span> = <span class=\"string\">&#x27;resolve&#x27;</span>;</span><br><span class=\"line\">            self.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">            self.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// resolve方法的作用是改变promise的status与value，并依次执行onResolvedCallbacks里面的onFulfilled</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">            self.<span class=\"property\">status</span> = <span class=\"string\">&#x27;reject&#x27;</span>;</span><br><span class=\"line\">            self.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">            self.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//reject方法与resolve相反</span></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve,reject)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled,onRejected</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;resolve&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) <span class=\"comment\">//如果已经resolve直接执行onFulfilled</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;reject&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>) <span class=\"comment\">// 如果已经reject，直接执行onRejected</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123; <span class=\"comment\">// 如果正在pending，暂存onFulfilled与onRejected，在resolve与reject函数被调用时再执行</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>( <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>( <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用一个例子来试一下我们的MyPromise</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val, <span class=\"string\">&#x27;done1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>一切运行良好，但是这种实现不支持链式调用与promise值穿透，比如这样写就不行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val, <span class=\"string\">&#x27;done1&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;done2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"支持链式调用的promise\"><a href=\"#支持链式调用的promise\" class=\"headerlink\" title=\"支持链式调用的promise\"></a>支持链式调用的promise</h1><p>其实promise链式调用的实现很简单，给then方法默认返回一个promise即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled,onRejected</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123; <span class=\"comment\">//then方法默认返回一个promise，这样就能链式调用了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;resolve&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>)&#123; <span class=\"comment\">//如果onFulfilled或onRejected返回一个promise，则需要等这个promise resolve或者reject了then方法返回的promise才会resolve或reject，这边是promise的值穿透功能。下同。</span></span><br><span class=\"line\">                    x.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">                &#125;   </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;reject&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>)&#123;</span><br><span class=\"line\">                    x.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>)&#123;</span><br><span class=\"line\">                        x.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>)&#123;</span><br><span class=\"line\">                        x.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<p>Promise这个构造函数与别的不一样，尽管平时使用时比较爽，但是站在函数设计者的角度来看就比较怪异。首先构造函数的参数是个函数（executor），这个函数的两个参数resolve与reject又是两个函数，且是在Promise构造函数内部定义的，调用executor时需要作为executor的参数。</p>\n<p>Promise的then方法的参数又是两个函数（onFulfilled与onRejected），这两函数会在该promise实例resolve或者reject时分别调用，且then方法还可以链式调用与值穿透。看起来很像一堆函数在互相作用，但Promise的用法却是面向对象的方式，所以容易让人困惑。</p>\n<p>先不考虑then方法的链式调用与值穿透，实现一个简易版的promise。</p>\n<h1 id=\"一个普通的不支持链式调用的promise\"><a href=\"#一个普通的不支持链式调用的promise\" class=\"headerlink\" title=\"一个普通的不支持链式调用的promise\"></a>一个普通的不支持链式调用的promise</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span>(<span class=\"params\">executor</span>)&#123; <span class=\"comment\">// 这个executor便是我们new Promise时传的函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span> <span class=\"comment\">// promise实例resolve时的值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span> <span class=\"comment\">// promise实例reject时的原因</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"string\">&#x27;pending&#x27;</span> <span class=\"comment\">// promise实例的状态</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span> = [] <span class=\"comment\">//用来存储then方法的onFulfilled方法，因为then方法可以被链式调用，所以这个参数是个数组。</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span> = [] <span class=\"comment\">//用来存储then方法的onRejected方法，因为then方法可以被链式调用，所以这个参数是个数组。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">            self.<span class=\"property\">status</span> = <span class=\"string\">&#x27;resolve&#x27;</span>;</span><br><span class=\"line\">            self.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">            self.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// resolve方法的作用是改变promise的status与value，并依次执行onResolvedCallbacks里面的onFulfilled</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">            self.<span class=\"property\">status</span> = <span class=\"string\">&#x27;reject&#x27;</span>;</span><br><span class=\"line\">            self.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">            self.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//reject方法与resolve相反</span></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(resolve,reject)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled,onRejected</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;resolve&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) <span class=\"comment\">//如果已经resolve直接执行onFulfilled</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;reject&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>) <span class=\"comment\">// 如果已经reject，直接执行onRejected</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123; <span class=\"comment\">// 如果正在pending，暂存onFulfilled与onRejected，在resolve与reject函数被调用时再执行</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>( <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>( <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用一个例子来试一下我们的MyPromise</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val, <span class=\"string\">&#x27;done1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>一切运行良好，但是这种实现不支持链式调用与promise值穿透，比如这样写就不行了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val, <span class=\"string\">&#x27;done1&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;done2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"支持链式调用的promise\"><a href=\"#支持链式调用的promise\" class=\"headerlink\" title=\"支持链式调用的promise\"></a>支持链式调用的promise</h1><p>其实promise链式调用的实现很简单，给then方法默认返回一个promise即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled,onRejected</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123; <span class=\"comment\">//then方法默认返回一个promise，这样就能链式调用了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;resolve&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>) </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>)&#123; <span class=\"comment\">//如果onFulfilled或onRejected返回一个promise，则需要等这个promise resolve或者reject了then方法返回的promise才会resolve或reject，这边是promise的值穿透功能。下同。</span></span><br><span class=\"line\">                    x.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">                &#125;   </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;reject&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>)&#123;</span><br><span class=\"line\">                    x.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;pending&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>)&#123;</span><br><span class=\"line\">                        x.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(x <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>)&#123;</span><br><span class=\"line\">                        x.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]}