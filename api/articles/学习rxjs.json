{"title":"学习rxjs","slug":"学习rxjs","date":"2023-04-27T22:45:48.000Z","updated":"2023-05-12T10:22:33.849Z","comments":true,"path":"api/articles/学习rxjs.json","excerpt":null,"covers":["https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/15d929d7-5bfc-43c6-9770-fbc8a97beb67-image.png","https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/e477044e-adc8-4ee7-a73a-7a47490c5941-image.png"],"content":"<h1 id=\"什么是rxjs\"><a href=\"#什么是rxjs\" class=\"headerlink\" title=\"什么是rxjs\"></a>什么是rxjs</h1><p>首先看什么是rxjs，chartgpt是这么回答的: </p>\n<p>RxJS是一种JavaScript库，它提供了一种用于处理异步数据流的编程模型。RxJS基于响应式编程概念，可以帮助开发人员更轻松地管理和操作复杂的异步数据流，并提供了丰富的操作符和工具，以便更好地处理这些数据流。</p>\n<p>RxJS可以与许多不同类型的应用程序和框架一起使用，包括Angular、React、Vue等。它已成为现代Web应用程序中非常流行的一部分，并且在处理大量异步数据时非常有用。</p>\n<p>这种非常官方的解释往往概念性很强，没有实用性。其实，在rxjs的眼里，不管是同步的还是异步的操作，都能抽象成流，可以用Observable new一条流，也可以用of、interval等函数（发射器）创造一条流，也可以把传统的操作转换成流，比如fromEvent、fromPromise、from。</p>\n<p>一条流就是一个Observable对象，流就像河流一样是动的，不然就是一潭死水，河流里流淌的是河水，由rxjs创造出的流里面流淌的是各种数据，这些数据可以是连续的，也可以是不连续的，就像河流一样可以断流。</p>\n<p>河流也是分上下游的，下游可以对上游流过来的“水”做各种加工，这种可以加工“水”的函数叫做操作符，最后作为消费者可以拿到最后的“水”，当然有的“水”是源源不断的，有的“水”是可以结束的，结束也分为正常结束和异常结束，一条流只能从流淌中变成正常结束，或者异常结束。</p>\n<p>这就是我对rxjs的通俗解释。</p>\n<h1 id=\"一个实用的例子\"><a href=\"#一个实用的例子\" class=\"headerlink\" title=\"一个实用的例子\"></a>一个实用的例子</h1><p>假如有这样一个需求，有一个搜索框，在用户输入关键字时实时的调用search接口，最后把结果显示成一个列表。</p>\n<p>这个需求肯定要用到函数去抖，不然不仅体验不好，服务端也扛不住，当然用传统技术栈这个功能也能完成，没有什么需求是必须使用某个技术栈才能完成，但是要是理解流的概念，用rxjs简直不要太丝滑。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBar</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>();</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>) <span class=\"comment\">//首先把用户在搜索框输入关键字的过程转换成一条流</span></span><br><span class=\"line\">            .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">                <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>), <span class=\"comment\">//操作符函数去抖</span></span><br><span class=\"line\">                <span class=\"title function_\">distinctUntilChanged</span>(), <span class=\"comment\">// 这个操作符会对上游过来的数据进行比对，如果本次数据与上一次数据不一样，才会放行</span></span><br><span class=\"line\">                <span class=\"title function_\">switchMap</span>(<span class=\"function\">() =&gt;</span> <span class=\"comment\">//这个switchMap暂且理解为map（前期为了方便，其实switchMap与map区别很大），map嘛，原生js数组就有map方法，顾名思义，即为映射，这里便是把上游用户输入的关键字映射为一个一个的http请求</span></span><br><span class=\"line\">                    <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                        <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                <span class=\"title function_\">mergeMap</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.<span class=\"title function_\">json</span>()) <span class=\"comment\">//这个暂且省略</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">                <span class=\"title function_\">next</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;list&quot;</span>, list);<span class=\"comment\">// 订阅这个流，拿到结果，更新ui</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要理解rxjs各个操作符都干了什么事，学会看弹珠图是必备的，这里不介绍如何看弹珠图，这东西很直观不需要解释，不过我推荐一个弹珠图<a href=\"https://rxmarbles.com/\">网站</a> 。</p>\n<p>回到上面的例子，上面的switchMap与mergeMap我解释的比较模糊，这里举个例子再次说明。先忽略这两个操作符，用最直白的map操作符实现同样的功能，看会出现什么问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBar</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>();</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">                <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">                <span class=\"title function_\">distinctUntilChanged</span>(),</span><br><span class=\"line\">                <span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> </span><br><span class=\"line\">                    <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                        <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">            .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">                <span class=\"title function_\">next</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;list&quot;</span>, list);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样写订阅者最后拿到的是一个一个的promise，这样肯定不行。改一些代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>) </span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">        <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">        <span class=\"title function_\">distinctUntilChanged</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> </span><br><span class=\"line\">            <span class=\"title function_\">from</span>( <span class=\"comment\">//新增</span></span><br><span class=\"line\">                <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;list&quot;</span>, list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>新加的from把promise转换成observable，这样写订阅者最后拿到的是一个个的observable，这样也不行，当然你可以这样改:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>) </span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">        <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">        <span class=\"title function_\">distinctUntilChanged</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> </span><br><span class=\"line\">            <span class=\"title function_\">from</span>( <span class=\"comment\">//新增</span></span><br><span class=\"line\">                <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">            list.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span> <span class=\"comment\">//新增</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>这样非常麻烦的解决了问题，有没有简单的办法，当然有，那就是mergeMap，这个操作符可以把map产生的多个observable合并成一个，所以说，这个操作符合并的是observable，如果输入的不是observable，会先转成observable。所以mergeMap代码可以这样写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>) </span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">        <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">        <span class=\"title function_\">distinctUntilChanged</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">mergeMap</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">            <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>这样写，确实解决了多个observable的问题，但是next拿到的数据是一个fetch response，fetch的response需要执行response.json()，这样才能拿到真实的数据，而response.json()返回的是一个promise，看到没有又回到了熟悉的问题，所以上面的代码在mergeMap之后还需要跟一个mergeMap</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mergeMap</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">),</span><br><span class=\"line\"><span class=\"title function_\">mergeMap</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.<span class=\"title function_\">json</span>())</span><br></pre></td></tr></table></figure>\n<p>这样就解决了问题，细心的你可能会发现，在最初的例子里第一个mergeMap用的是switchMap，这俩有啥区别呢？通俗的说，当前一个fetch还没有resolve时，来了一个新的fetch，switchMap会取消未完成的fetch，只关注最新的请求，而mergeMap则没有这种特性。</p>\n<h1 id=\"订阅与退订\"><a href=\"#订阅与退订\" class=\"headerlink\" title=\"订阅与退订\"></a>订阅与退订</h1><p>先来一个简单的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\"><span class=\"params\">obs</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timerid = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        obs.<span class=\"title function_\">next</span>(count++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            obs.<span class=\"title function_\">complete</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//标记1</span></span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timerid)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> subscribe = source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    subscribe.<span class=\"title function_\">unsubscribe</span>()</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<p>首先我通过new Observable 创造了一个source$，这个source$是冷启动的，然后执行source$.subscribe(订阅)，由于这个流是冷启动的，所以执行subscribe方法就相当于重新执行Observable的回调函数，最后在两秒后执行退订操作，一旦我们unsubscribe，就会执行标记1，除了主动unsubscribe，当一个流complete&#x2F;error时也会执行标记1</p>\n<h1 id=\"热启动与冷启动\"><a href=\"#热启动与冷启动\" class=\"headerlink\" title=\"热启动与冷启动\"></a>热启动与冷启动</h1><p>假如我们去看电影，可以选择线上或者线下，去线上看，每个人都独享一个播放器，每来一个人电影都是从头开始播放的，这就是冷启动。但是换成线下，比如去电影院，电影已经开始了，中途来了一些人，这时电影不可能从头播放，新人只能接着看，这就是热启动，用代码表示，还是刚才的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\"><span class=\"params\">obs</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timerid = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        obs.<span class=\"title function_\">next</span>(count++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            obs.<span class=\"title function_\">complete</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//标记1</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;termdowwn&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timerid)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<p>上述代码的source$是冷启动的，因为通过new Observable创建的流都是冷启动的，执行结果:</p>\n<p><img src=\"https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/15d929d7-5bfc-43c6-9770-fbc8a97beb67-image.png\" alt=\"15d929d7-5bfc-43c6-9770-fbc8a97beb67-image.png\"></p>\n<p>我们可以用share操作符，把这个流转换成热启动的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\"><span class=\"params\">obs</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timerid = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        obs.<span class=\"title function_\">next</span>(count++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            obs.<span class=\"title function_\">complete</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//标记1</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;termdowwn&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timerid)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">share</span>() <span class=\"comment\">//新增</span></span><br><span class=\"line\">)</span><br><span class=\"line\">source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/e477044e-adc8-4ee7-a73a-7a47490c5941-image.png\" alt=\"e477044e-adc8-4ee7-a73a-7a47490c5941-image.png\"></p>\n<p>为什么要区分冷&#x2F;热启动，主要是由使用场景决定的。</p>\n<h1 id=\"creation-function-发射器\"><a href=\"#creation-function-发射器\" class=\"headerlink\" title=\"creation function(发射器)\"></a>creation function(发射器)</h1><p>rxjs中有一些函数并不是操作符，这类函数能直接创造出observable对象，比如of、interval、timer、from、fromEvent之类的，前三个就不说了，后两个可以把不是observable的数据转换成observable，比如from([1,2,3])、fromEvent(inputDom,’input’)</p>\n<h1 id=\"rxjs操作符\"><a href=\"#rxjs操作符\" class=\"headerlink\" title=\"rxjs操作符\"></a>rxjs操作符</h1><h2 id=\"转换操作符\"><a href=\"#转换操作符\" class=\"headerlink\" title=\"转换操作符\"></a>转换操作符</h2><h2 id=\"过滤操作符\"><a href=\"#过滤操作符\" class=\"headerlink\" title=\"过滤操作符\"></a>过滤操作符</h2><h2 id=\"组合操作符\"><a href=\"#组合操作符\" class=\"headerlink\" title=\"组合操作符\"></a>组合操作符</h2><h2 id=\"多播操作符\"><a href=\"#多播操作符\" class=\"headerlink\" title=\"多播操作符\"></a>多播操作符</h2><h2 id=\"错误处理操作符\"><a href=\"#错误处理操作符\" class=\"headerlink\" title=\"错误处理操作符\"></a>错误处理操作符</h2><h2 id=\"错误处理操作符-1\"><a href=\"#错误处理操作符-1\" class=\"headerlink\" title=\"错误处理操作符\"></a>错误处理操作符</h2><h2 id=\"工具操作符\"><a href=\"#工具操作符\" class=\"headerlink\" title=\"工具操作符\"></a>工具操作符</h2><h2 id=\"条件和布尔操作符\"><a href=\"#条件和布尔操作符\" class=\"headerlink\" title=\"条件和布尔操作符\"></a>条件和布尔操作符</h2><h2 id=\"数学和聚合操作符\"><a href=\"#数学和聚合操作符\" class=\"headerlink\" title=\"数学和聚合操作符\"></a>数学和聚合操作符</h2><h2 id=\"forkJoin\"><a href=\"#forkJoin\" class=\"headerlink\" title=\"forkJoin\"></a>forkJoin</h2><p>先看官方的解释：</p>\n<p>Accepts an Array of ObservableInput or a dictionary Object of ObservableInput and returns an Observable that emits either an array of values in the exact same order as the passed array, or a dictionary of values in the same shape as the passed dictionary.</p>\n<p>翻译成中文：这个函数接受一个ObservableInput类型的数组或一个ObservableInput类型的字典对象，然后返回一个Observable。这个Observable会按照传入的数组顺序发出值的数组，或者按照传入的字典对象的形状发出值的字典。简单来说，它可以将多个Observable合并成一个Observable，并且保持原有的数据结构不变。</p>\n<p>通俗的讲，forkJoin是rxjs中的Promise.all，后者能完成的forkJoin都可以，而且也支持嵌套。</p>\n<p>一个promise.all的简单场景</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://example1.com&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://example2.com&#x27;</span>),</span><br><span class=\"line\">]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([res1.<span class=\"title function_\">json</span>(),res2.<span class=\"title function_\">json</span>()])</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1,res2)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>用forkJoin这么写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">forkJoin</span>(</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://example1.com&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://example2.com&#x27;</span>)</span><br><span class=\"line\">).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">mergeMap</span>(<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">forkJoin</span>(res1.<span class=\"title function_\">json</span>(),res2.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">).<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>:<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1,res2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>从实际使用来看，forkJoin的参数如果不是ObservableInput类型，会调用from转换成一个ObservableInput，而且这种例子很明显Promise.all更简洁一点，不过rxjs支持teardown，所谓teardown就是在流完成、出错或者被退订时，提供了一个钩子，可以执行一些清理工作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">customFetch</span> = (<span class=\"params\">url</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\"><span class=\"params\">obs</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> controller = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>()</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(url,&#123;</span><br><span class=\"line\">            <span class=\"attr\">signal</span>: controller.<span class=\"property\">signal</span></span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.<span class=\"title function_\">json</span>()).<span class=\"title function_\">then</span>(obs.<span class=\"property\">next</span>).<span class=\"title function_\">catch</span>(obs.<span class=\"property\">error</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> controller.<span class=\"title function_\">abort</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"combineLatest-x2F-merge-x2F-concat区别\"><a href=\"#combineLatest-x2F-merge-x2F-concat区别\" class=\"headerlink\" title=\"combineLatest&#x2F;merge&#x2F;concat区别\"></a>combineLatest&#x2F;merge&#x2F;concat区别</h2><p>本来想解释一下，后来发现看弹珠图更清晰。</p>\n<p><a href=\"https://rxmarbles.com/#concat\">concat</a><br><a href=\"https://rxmarbles.com/#merge\">merge</a><br><a href=\"https://rxmarbles.com/#combineLatest\">combineLatest</a></p>\n<p>concat是三者里面最简单的，有点类似数组的concat方法，剩下两个可以用我给的看弹珠图网站，自己玩玩，深刻体会一下。</p>\n<p>&#x2F;&#x2F;按照种类分类</p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><h2 id=\"mergeMap\"><a href=\"#mergeMap\" class=\"headerlink\" title=\"mergeMap\"></a>mergeMap</h2><h2 id=\"switchMap\"><a href=\"#switchMap\" class=\"headerlink\" title=\"switchMap\"></a>switchMap</h2><h2 id=\"catchError\"><a href=\"#catchError\" class=\"headerlink\" title=\"catchError\"></a>catchError</h2><h2 id=\"bufferCount-x2F-bufferTime\"><a href=\"#bufferCount-x2F-bufferTime\" class=\"headerlink\" title=\"bufferCount&#x2F;bufferTime\"></a>bufferCount&#x2F;bufferTime</h2><h1 id=\"rxjs适用的场景\"><a href=\"#rxjs适用的场景\" class=\"headerlink\" title=\"rxjs适用的场景\"></a>rxjs适用的场景</h1><p>前面已经说过，rxjs主要是操作流的工具集，如果某个数据&#x2F;操作不是流，需要先转换成流。简单的数据这样做是很麻烦的，假如我们要过滤某些数据，我们完全可以调用数组的filter方法，又比如有一个promise，如果用rxjs处理也很麻烦，一个最朴素的promise用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://www.example.com&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.<span class=\"title function_\">json</span>()).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br></pre></td></tr></table></figure>\n<p>用rxjs需要这样写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">from</span>(</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://www.example.com&#x27;</span>)</span><br><span class=\"line\">).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">mergeMap</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">).<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其实这样简单的问题交给rxjs去处理，完全是高射炮打蚊子，那rxjs适合什么场景呢，我觉得rxjs适合那种可以<em style=\"font-weight:800\">高频触发</em>的场景，比如上文中提到的实用的例子，像我们经常提到的去抖、节流之类的，在人家这就一个操作符的事。有人说rxjs可以用来处理复杂的异步，常见的异步直接上promise，或者Promise.all都能覆盖绝大多数场景，但是你有没有发现promise是有弊端的，像fetch-event-source或者websocket这类长连接，用promise会力不从心，这时候rxjs就可以大展神通，还可以用bufferCount或者bufferTime控制下游的压力，更复杂点的，假如页面上有多个长连接，也可以用rxjs。</p>\n<p>虽然rxjs中的from与fromEvent可以把常见的数据&#x2F;操作转换成一个流，但是大多数转换是没有意义的，rxjs是高效处理流的工具集，只有长的像流的数据&#x2F;操作装换成流才能发挥出rxjs的威力，所以以我所见，判断某个需求是否需要引入rxjs，可以看这个需求是否需要高频触发。</p>\n<p>最后给一个彩蛋，假如有这样一个场景，在2s内输入规定的按键，可以触发彩蛋操作，就像打游戏释放隐藏大招，这样一个需求代码怎么写，如果用rxjs不要太简单</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> code = [</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowUp&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowUp&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowDown&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowDown&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowLeft&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowRight&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowLeft&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowRight&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;KeyB&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;KeyA&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;KeyB&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;KeyA&quot;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">document</span>, <span class=\"string\">&#x27;keyup&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e.<span class=\"property\">code</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">bufferTime</span>(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">keys</span> =&gt;</span> keys.<span class=\"property\">length</span> === <span class=\"number\">12</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">last12key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_.<span class=\"title function_\">isEqual</span>(last12key, code)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;隐藏的彩蛋 \\(^o^)/~&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>当然你通过监听document的keyup事件，然后计时也可以实现，不过你有没有发现用rxjs写完整个过程一气呵成，代码也很有语义，是别的方法难以比拟的。</p>\n","more":"<h1 id=\"什么是rxjs\"><a href=\"#什么是rxjs\" class=\"headerlink\" title=\"什么是rxjs\"></a>什么是rxjs</h1><p>首先看什么是rxjs，chartgpt是这么回答的: </p>\n<p>RxJS是一种JavaScript库，它提供了一种用于处理异步数据流的编程模型。RxJS基于响应式编程概念，可以帮助开发人员更轻松地管理和操作复杂的异步数据流，并提供了丰富的操作符和工具，以便更好地处理这些数据流。</p>\n<p>RxJS可以与许多不同类型的应用程序和框架一起使用，包括Angular、React、Vue等。它已成为现代Web应用程序中非常流行的一部分，并且在处理大量异步数据时非常有用。</p>\n<p>这种非常官方的解释往往概念性很强，没有实用性。其实，在rxjs的眼里，不管是同步的还是异步的操作，都能抽象成流，可以用Observable new一条流，也可以用of、interval等函数（发射器）创造一条流，也可以把传统的操作转换成流，比如fromEvent、fromPromise、from。</p>\n<p>一条流就是一个Observable对象，流就像河流一样是动的，不然就是一潭死水，河流里流淌的是河水，由rxjs创造出的流里面流淌的是各种数据，这些数据可以是连续的，也可以是不连续的，就像河流一样可以断流。</p>\n<p>河流也是分上下游的，下游可以对上游流过来的“水”做各种加工，这种可以加工“水”的函数叫做操作符，最后作为消费者可以拿到最后的“水”，当然有的“水”是源源不断的，有的“水”是可以结束的，结束也分为正常结束和异常结束，一条流只能从流淌中变成正常结束，或者异常结束。</p>\n<p>这就是我对rxjs的通俗解释。</p>\n<h1 id=\"一个实用的例子\"><a href=\"#一个实用的例子\" class=\"headerlink\" title=\"一个实用的例子\"></a>一个实用的例子</h1><p>假如有这样一个需求，有一个搜索框，在用户输入关键字时实时的调用search接口，最后把结果显示成一个列表。</p>\n<p>这个需求肯定要用到函数去抖，不然不仅体验不好，服务端也扛不住，当然用传统技术栈这个功能也能完成，没有什么需求是必须使用某个技术栈才能完成，但是要是理解流的概念，用rxjs简直不要太丝滑。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBar</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>();</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>) <span class=\"comment\">//首先把用户在搜索框输入关键字的过程转换成一条流</span></span><br><span class=\"line\">            .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">                <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>), <span class=\"comment\">//操作符函数去抖</span></span><br><span class=\"line\">                <span class=\"title function_\">distinctUntilChanged</span>(), <span class=\"comment\">// 这个操作符会对上游过来的数据进行比对，如果本次数据与上一次数据不一样，才会放行</span></span><br><span class=\"line\">                <span class=\"title function_\">switchMap</span>(<span class=\"function\">() =&gt;</span> <span class=\"comment\">//这个switchMap暂且理解为map（前期为了方便，其实switchMap与map区别很大），map嘛，原生js数组就有map方法，顾名思义，即为映射，这里便是把上游用户输入的关键字映射为一个一个的http请求</span></span><br><span class=\"line\">                    <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                        <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                <span class=\"title function_\">mergeMap</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.<span class=\"title function_\">json</span>()) <span class=\"comment\">//这个暂且省略</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">                <span class=\"title function_\">next</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;list&quot;</span>, list);<span class=\"comment\">// 订阅这个流，拿到结果，更新ui</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要理解rxjs各个操作符都干了什么事，学会看弹珠图是必备的，这里不介绍如何看弹珠图，这东西很直观不需要解释，不过我推荐一个弹珠图<a href=\"https://rxmarbles.com/\">网站</a> 。</p>\n<p>回到上面的例子，上面的switchMap与mergeMap我解释的比较模糊，这里举个例子再次说明。先忽略这两个操作符，用最直白的map操作符实现同样的功能，看会出现什么问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBar</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> inputRef = <span class=\"title function_\">useRef</span>();</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">                <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">                <span class=\"title function_\">distinctUntilChanged</span>(),</span><br><span class=\"line\">                <span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> </span><br><span class=\"line\">                    <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                        <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">            .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">                <span class=\"title function_\">next</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;list&quot;</span>, list);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样写订阅者最后拿到的是一个一个的promise，这样肯定不行。改一些代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>) </span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">        <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">        <span class=\"title function_\">distinctUntilChanged</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> </span><br><span class=\"line\">            <span class=\"title function_\">from</span>( <span class=\"comment\">//新增</span></span><br><span class=\"line\">                <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;list&quot;</span>, list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>新加的from把promise转换成observable，这样写订阅者最后拿到的是一个个的observable，这样也不行，当然你可以这样改:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>) </span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">        <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">        <span class=\"title function_\">distinctUntilChanged</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> </span><br><span class=\"line\">            <span class=\"title function_\">from</span>( <span class=\"comment\">//新增</span></span><br><span class=\"line\">                <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">            list.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span> <span class=\"comment\">//新增</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>这样非常麻烦的解决了问题，有没有简单的办法，当然有，那就是mergeMap，这个操作符可以把map产生的多个observable合并成一个，所以说，这个操作符合并的是observable，如果输入的不是observable，会先转成observable。所以mergeMap代码可以这样写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fromEvent</span>(inputRef.<span class=\"property\">current</span>, <span class=\"string\">&quot;input&quot;</span>) </span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">        <span class=\"title function_\">debounceTime</span>(<span class=\"number\">300</span>),</span><br><span class=\"line\">        <span class=\"title function_\">distinctUntilChanged</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">mergeMap</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">            <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">                <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>这样写，确实解决了多个observable的问题，但是next拿到的数据是一个fetch response，fetch的response需要执行response.json()，这样才能拿到真实的数据，而response.json()返回的是一个promise，看到没有又回到了熟悉的问题，所以上面的代码在mergeMap之后还需要跟一个mergeMap</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mergeMap</span>(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;https://example.com/search&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">),</span><br><span class=\"line\"><span class=\"title function_\">mergeMap</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.<span class=\"title function_\">json</span>())</span><br></pre></td></tr></table></figure>\n<p>这样就解决了问题，细心的你可能会发现，在最初的例子里第一个mergeMap用的是switchMap，这俩有啥区别呢？通俗的说，当前一个fetch还没有resolve时，来了一个新的fetch，switchMap会取消未完成的fetch，只关注最新的请求，而mergeMap则没有这种特性。</p>\n<h1 id=\"订阅与退订\"><a href=\"#订阅与退订\" class=\"headerlink\" title=\"订阅与退订\"></a>订阅与退订</h1><p>先来一个简单的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\"><span class=\"params\">obs</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timerid = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        obs.<span class=\"title function_\">next</span>(count++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            obs.<span class=\"title function_\">complete</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//标记1</span></span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timerid)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> subscribe = source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    subscribe.<span class=\"title function_\">unsubscribe</span>()</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<p>首先我通过new Observable 创造了一个source$，这个source$是冷启动的，然后执行source$.subscribe(订阅)，由于这个流是冷启动的，所以执行subscribe方法就相当于重新执行Observable的回调函数，最后在两秒后执行退订操作，一旦我们unsubscribe，就会执行标记1，除了主动unsubscribe，当一个流complete&#x2F;error时也会执行标记1</p>\n<h1 id=\"热启动与冷启动\"><a href=\"#热启动与冷启动\" class=\"headerlink\" title=\"热启动与冷启动\"></a>热启动与冷启动</h1><p>假如我们去看电影，可以选择线上或者线下，去线上看，每个人都独享一个播放器，每来一个人电影都是从头开始播放的，这就是冷启动。但是换成线下，比如去电影院，电影已经开始了，中途来了一些人，这时电影不可能从头播放，新人只能接着看，这就是热启动，用代码表示，还是刚才的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\"><span class=\"params\">obs</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timerid = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        obs.<span class=\"title function_\">next</span>(count++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            obs.<span class=\"title function_\">complete</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//标记1</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;termdowwn&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timerid)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<p>上述代码的source$是冷启动的，因为通过new Observable创建的流都是冷启动的，执行结果:</p>\n<p><img src=\"https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/15d929d7-5bfc-43c6-9770-fbc8a97beb67-image.png\" alt=\"15d929d7-5bfc-43c6-9770-fbc8a97beb67-image.png\"></p>\n<p>我们可以用share操作符，把这个流转换成热启动的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\"><span class=\"params\">obs</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> timerid = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        obs.<span class=\"title function_\">next</span>(count++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            obs.<span class=\"title function_\">complete</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//标记1</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;termdowwn&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timerid)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">share</span>() <span class=\"comment\">//新增</span></span><br><span class=\"line\">)</span><br><span class=\"line\">source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    source$.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/e477044e-adc8-4ee7-a73a-7a47490c5941-image.png\" alt=\"e477044e-adc8-4ee7-a73a-7a47490c5941-image.png\"></p>\n<p>为什么要区分冷&#x2F;热启动，主要是由使用场景决定的。</p>\n<h1 id=\"creation-function-发射器\"><a href=\"#creation-function-发射器\" class=\"headerlink\" title=\"creation function(发射器)\"></a>creation function(发射器)</h1><p>rxjs中有一些函数并不是操作符，这类函数能直接创造出observable对象，比如of、interval、timer、from、fromEvent之类的，前三个就不说了，后两个可以把不是observable的数据转换成observable，比如from([1,2,3])、fromEvent(inputDom,’input’)</p>\n<h1 id=\"rxjs操作符\"><a href=\"#rxjs操作符\" class=\"headerlink\" title=\"rxjs操作符\"></a>rxjs操作符</h1><h2 id=\"转换操作符\"><a href=\"#转换操作符\" class=\"headerlink\" title=\"转换操作符\"></a>转换操作符</h2><h2 id=\"过滤操作符\"><a href=\"#过滤操作符\" class=\"headerlink\" title=\"过滤操作符\"></a>过滤操作符</h2><h2 id=\"组合操作符\"><a href=\"#组合操作符\" class=\"headerlink\" title=\"组合操作符\"></a>组合操作符</h2><h2 id=\"多播操作符\"><a href=\"#多播操作符\" class=\"headerlink\" title=\"多播操作符\"></a>多播操作符</h2><h2 id=\"错误处理操作符\"><a href=\"#错误处理操作符\" class=\"headerlink\" title=\"错误处理操作符\"></a>错误处理操作符</h2><h2 id=\"错误处理操作符-1\"><a href=\"#错误处理操作符-1\" class=\"headerlink\" title=\"错误处理操作符\"></a>错误处理操作符</h2><h2 id=\"工具操作符\"><a href=\"#工具操作符\" class=\"headerlink\" title=\"工具操作符\"></a>工具操作符</h2><h2 id=\"条件和布尔操作符\"><a href=\"#条件和布尔操作符\" class=\"headerlink\" title=\"条件和布尔操作符\"></a>条件和布尔操作符</h2><h2 id=\"数学和聚合操作符\"><a href=\"#数学和聚合操作符\" class=\"headerlink\" title=\"数学和聚合操作符\"></a>数学和聚合操作符</h2><h2 id=\"forkJoin\"><a href=\"#forkJoin\" class=\"headerlink\" title=\"forkJoin\"></a>forkJoin</h2><p>先看官方的解释：</p>\n<p>Accepts an Array of ObservableInput or a dictionary Object of ObservableInput and returns an Observable that emits either an array of values in the exact same order as the passed array, or a dictionary of values in the same shape as the passed dictionary.</p>\n<p>翻译成中文：这个函数接受一个ObservableInput类型的数组或一个ObservableInput类型的字典对象，然后返回一个Observable。这个Observable会按照传入的数组顺序发出值的数组，或者按照传入的字典对象的形状发出值的字典。简单来说，它可以将多个Observable合并成一个Observable，并且保持原有的数据结构不变。</p>\n<p>通俗的讲，forkJoin是rxjs中的Promise.all，后者能完成的forkJoin都可以，而且也支持嵌套。</p>\n<p>一个promise.all的简单场景</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://example1.com&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://example2.com&#x27;</span>),</span><br><span class=\"line\">]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([res1.<span class=\"title function_\">json</span>(),res2.<span class=\"title function_\">json</span>()])</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1,res2)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>用forkJoin这么写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">forkJoin</span>(</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://example1.com&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://example2.com&#x27;</span>)</span><br><span class=\"line\">).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">mergeMap</span>(<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">forkJoin</span>(res1.<span class=\"title function_\">json</span>(),res2.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">).<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>:<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1,res2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>从实际使用来看，forkJoin的参数如果不是ObservableInput类型，会调用from转换成一个ObservableInput，而且这种例子很明显Promise.all更简洁一点，不过rxjs支持teardown，所谓teardown就是在流完成、出错或者被退订时，提供了一个钩子，可以执行一些清理工作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">customFetch</span> = (<span class=\"params\">url</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Observable</span>(<span class=\"function\"><span class=\"params\">obs</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> controller = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>()</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(url,&#123;</span><br><span class=\"line\">            <span class=\"attr\">signal</span>: controller.<span class=\"property\">signal</span></span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.<span class=\"title function_\">json</span>()).<span class=\"title function_\">then</span>(obs.<span class=\"property\">next</span>).<span class=\"title function_\">catch</span>(obs.<span class=\"property\">error</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> controller.<span class=\"title function_\">abort</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"combineLatest-x2F-merge-x2F-concat区别\"><a href=\"#combineLatest-x2F-merge-x2F-concat区别\" class=\"headerlink\" title=\"combineLatest&#x2F;merge&#x2F;concat区别\"></a>combineLatest&#x2F;merge&#x2F;concat区别</h2><p>本来想解释一下，后来发现看弹珠图更清晰。</p>\n<p><a href=\"https://rxmarbles.com/#concat\">concat</a><br><a href=\"https://rxmarbles.com/#merge\">merge</a><br><a href=\"https://rxmarbles.com/#combineLatest\">combineLatest</a></p>\n<p>concat是三者里面最简单的，有点类似数组的concat方法，剩下两个可以用我给的看弹珠图网站，自己玩玩，深刻体会一下。</p>\n<p>&#x2F;&#x2F;按照种类分类</p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><h2 id=\"mergeMap\"><a href=\"#mergeMap\" class=\"headerlink\" title=\"mergeMap\"></a>mergeMap</h2><h2 id=\"switchMap\"><a href=\"#switchMap\" class=\"headerlink\" title=\"switchMap\"></a>switchMap</h2><h2 id=\"catchError\"><a href=\"#catchError\" class=\"headerlink\" title=\"catchError\"></a>catchError</h2><h2 id=\"bufferCount-x2F-bufferTime\"><a href=\"#bufferCount-x2F-bufferTime\" class=\"headerlink\" title=\"bufferCount&#x2F;bufferTime\"></a>bufferCount&#x2F;bufferTime</h2><h1 id=\"rxjs适用的场景\"><a href=\"#rxjs适用的场景\" class=\"headerlink\" title=\"rxjs适用的场景\"></a>rxjs适用的场景</h1><p>前面已经说过，rxjs主要是操作流的工具集，如果某个数据&#x2F;操作不是流，需要先转换成流。简单的数据这样做是很麻烦的，假如我们要过滤某些数据，我们完全可以调用数组的filter方法，又比如有一个promise，如果用rxjs处理也很麻烦，一个最朴素的promise用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://www.example.com&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.<span class=\"title function_\">json</span>()).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br></pre></td></tr></table></figure>\n<p>用rxjs需要这样写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">from</span>(</span><br><span class=\"line\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://www.example.com&#x27;</span>)</span><br><span class=\"line\">).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">    <span class=\"title function_\">mergeMap</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">).<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其实这样简单的问题交给rxjs去处理，完全是高射炮打蚊子，那rxjs适合什么场景呢，我觉得rxjs适合那种可以<em style=\"font-weight:800\">高频触发</em>的场景，比如上文中提到的实用的例子，像我们经常提到的去抖、节流之类的，在人家这就一个操作符的事。有人说rxjs可以用来处理复杂的异步，常见的异步直接上promise，或者Promise.all都能覆盖绝大多数场景，但是你有没有发现promise是有弊端的，像fetch-event-source或者websocket这类长连接，用promise会力不从心，这时候rxjs就可以大展神通，还可以用bufferCount或者bufferTime控制下游的压力，更复杂点的，假如页面上有多个长连接，也可以用rxjs。</p>\n<p>虽然rxjs中的from与fromEvent可以把常见的数据&#x2F;操作转换成一个流，但是大多数转换是没有意义的，rxjs是高效处理流的工具集，只有长的像流的数据&#x2F;操作装换成流才能发挥出rxjs的威力，所以以我所见，判断某个需求是否需要引入rxjs，可以看这个需求是否需要高频触发。</p>\n<p>最后给一个彩蛋，假如有这样一个场景，在2s内输入规定的按键，可以触发彩蛋操作，就像打游戏释放隐藏大招，这样一个需求代码怎么写，如果用rxjs不要太简单</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> code = [</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowUp&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowUp&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowDown&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowDown&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowLeft&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowRight&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowLeft&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;ArrowRight&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;KeyB&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;KeyA&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;KeyB&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;KeyA&quot;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">fromEvent</span>(<span class=\"variable language_\">document</span>, <span class=\"string\">&#x27;keyup&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e.<span class=\"property\">code</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">bufferTime</span>(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">keys</span> =&gt;</span> keys.<span class=\"property\">length</span> === <span class=\"number\">12</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">last12key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_.<span class=\"title function_\">isEqual</span>(last12key, code)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;隐藏的彩蛋 \\(^o^)/~&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>当然你通过监听document的keyup事件，然后计时也可以实现，不过你有没有发现用rxjs写完整个过程一气呵成，代码也很有语义，是别的方法难以比拟的。</p>\n","categories":[],"tags":[]}