{"title":"如何使用nextjs实现上传pdf","slug":"如何使用nextjs实现上传pdf","date":"2023-12-09T14:21:53.000Z","updated":"2023-12-09T12:34:59.350Z","comments":true,"path":"api/articles/如何使用nextjs实现上传pdf.json","excerpt":null,"covers":["https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/839ccc20-58c2-4830-94fb-f1ed9af5d960-buffer_from_upload.png","https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/5a5738e6-2085-4381-953b-173466716bd9-image.png"],"content":"<p>之前研究gpt4-pdf-chatbot-langchain这个项目，觉得挺有意思，竟然可以让chatgpt去读一本书，还是js写的。不过这项目有一点不方便，他需要用nodejs解析pdf，然后用openai提供的api把api向量化，接着在浏览器里才能基于这本书的内容向chatgpt提问。</p>\n<p>然后我就想能不能把所有的操作入口都放在浏览器上，在浏览器上上传一个pdf，然后后端拿到上传的pdf，解析pdf，向量化，后面的操作和原项目一样。基于这样的想法，我写了以下的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//pages/index.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onFileUplload</span> = e=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> file = event.<span class=\"property\">target</span>.<span class=\"property\">files</span>?.[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>()</span><br><span class=\"line\">        formData.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;file&#x27;</span>, file)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/upload&#x27;</span>,&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">body</span>: formData,</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">resp</span>)=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(resp.<span class=\"property\">status</span> !== <span class=\"number\">200</span>) <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(resp.<span class=\"property\">statusText</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resp.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;dropzone-file2&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;onFileUplload&#125;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;.pdf&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//pegae/api/upload.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handler</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    req: NextApiRequest,</span></span><br><span class=\"line\"><span class=\"params\">    res: NextApiResponse,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> buffer =  <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(req.<span class=\"property\">body</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buffer);</span><br><span class=\"line\">    <span class=\"comment\">// 处理buffer，解析pdf</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">api</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">bodyParser</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">sizeLimit</span>: <span class=\"string\">&#x27;10mb&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码后续在解析pdf的过程中报错了，说我的pdf是加密的，很明显不是这个原因。经过一番查找发现，发现用以上代码拿到的buffer与直接用nodejs读pdf拿到的buffer长度不一样。</p>\n<p>buffer from browser upload<br><img src=\"https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/839ccc20-58c2-4830-94fb-f1ed9af5d960-buffer_from_upload.png\" alt=\"839ccc20-58c2-4830-94fb-f1ed9af5d960-buffer_from_upload.png\"></p>\n<p>buffer from nodejs<br><img src=\"https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/5a5738e6-2085-4381-953b-173466716bd9-image.png\" alt=\"5a5738e6-2085-4381-953b-173466716bd9-image.png\"></p>\n<p>显然，[buffer from browser upload]有问题，那这一步的buffer是从哪里来的，const buffer &#x3D;  Buffer.from(req.body)，把这里的req.body打印出来看看，发现是个乱码的字符串，很明显不对，后续再把这个错误的字符串转换成buffer，后面的一系列步骤都错了。</p>\n<p>这个错误到底是怎么来的，怎么会拿到一个乱码的字符串呢？那就从源头查起， 我们知道浏览器上的http请求，不管请求体中是什么数据，最终都会转化为二进制，就是所谓的数字信号，然后数电转模电，单纯的数字信号是不能发射的，只能转换成模拟信号，就是我们说的波，发射出去。目标服务器在接收到这个波以后，需要把模拟信号转换成数字信号，就是二进制，然后才能处理这条http请求。数电模电之间的转换是不可能出错的，按照以上理论，我们在服务端拿到的这条请求应该是个二进制流才对，为什么会是乱码的字符串呢，所以，最大的可能就是nextjs处理了这个二进制流，但是没有处理好。所以我们需要拿到原始的二进制流。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getBoundary, parse &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;parse-multipart-data&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handler</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    req: NextApiRequest,</span></span><br><span class=\"line\"><span class=\"params\">    res: NextApiResponse,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">chunks</span>: <span class=\"title class_\">Uint8Array</span>[] = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> size = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sizeLimit = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"function\">(<span class=\"params\">chunk</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        size += chunk.<span class=\"property\">length</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(size &gt; sizeLimit)&#123;</span><br><span class=\"line\">            res.<span class=\"title function_\">status</span>(<span class=\"number\">413</span>).<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;payload too large&#x27;</span>)</span><br><span class=\"line\">            req.<span class=\"property\">connection</span>.<span class=\"title function_\">destroy</span>()</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks.<span class=\"title function_\">push</span>(chunk)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>,<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> boundary = <span class=\"title function_\">getBoundary</span>(req.<span class=\"property\">rawHeaders</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;;&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">const</span> completeBuffer = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">concat</span>(chunks)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parts = <span class=\"title function_\">parse</span>(completeBuffer, boundary)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [file] = parts</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;file.data&#x27;</span>,file.<span class=\"property\">data</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>,<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">        res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;an error occurred&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">api</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">bodyParser</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码一目了然，先禁掉nextjs内置的bodyParser，直接监听req的data与end事件，收集chunk，然后通过getBoundary与parse从formdata中解析出file，这里log出的file.data就是正确的数据，长度是1086938。</p>\n<p>拿到正确的buffer以后就可以调用pdf-parser解析了。</p>\n","more":"<p>之前研究gpt4-pdf-chatbot-langchain这个项目，觉得挺有意思，竟然可以让chatgpt去读一本书，还是js写的。不过这项目有一点不方便，他需要用nodejs解析pdf，然后用openai提供的api把api向量化，接着在浏览器里才能基于这本书的内容向chatgpt提问。</p>\n<p>然后我就想能不能把所有的操作入口都放在浏览器上，在浏览器上上传一个pdf，然后后端拿到上传的pdf，解析pdf，向量化，后面的操作和原项目一样。基于这样的想法，我写了以下的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//pages/index.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">onFileUplload</span> = e=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> file = event.<span class=\"property\">target</span>.<span class=\"property\">files</span>?.[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>()</span><br><span class=\"line\">        formData.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;file&#x27;</span>, file)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/upload&#x27;</span>,&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">body</span>: formData,</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">resp</span>)=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(resp.<span class=\"property\">status</span> !== <span class=\"number\">200</span>) <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(resp.<span class=\"property\">statusText</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resp.<span class=\"title function_\">json</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;dropzone-file2&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;onFileUplload&#125;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;.pdf&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//pegae/api/upload.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handler</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    req: NextApiRequest,</span></span><br><span class=\"line\"><span class=\"params\">    res: NextApiResponse,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> buffer =  <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(req.<span class=\"property\">body</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buffer);</span><br><span class=\"line\">    <span class=\"comment\">// 处理buffer，解析pdf</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">api</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">bodyParser</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">sizeLimit</span>: <span class=\"string\">&#x27;10mb&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码后续在解析pdf的过程中报错了，说我的pdf是加密的，很明显不是这个原因。经过一番查找发现，发现用以上代码拿到的buffer与直接用nodejs读pdf拿到的buffer长度不一样。</p>\n<p>buffer from browser upload<br><img src=\"https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/839ccc20-58c2-4830-94fb-f1ed9af5d960-buffer_from_upload.png\" alt=\"839ccc20-58c2-4830-94fb-f1ed9af5d960-buffer_from_upload.png\"></p>\n<p>buffer from nodejs<br><img src=\"https://likaiqiang-blog.oss-cn-beijing.aliyuncs.com/images/5a5738e6-2085-4381-953b-173466716bd9-image.png\" alt=\"5a5738e6-2085-4381-953b-173466716bd9-image.png\"></p>\n<p>显然，[buffer from browser upload]有问题，那这一步的buffer是从哪里来的，const buffer &#x3D;  Buffer.from(req.body)，把这里的req.body打印出来看看，发现是个乱码的字符串，很明显不对，后续再把这个错误的字符串转换成buffer，后面的一系列步骤都错了。</p>\n<p>这个错误到底是怎么来的，怎么会拿到一个乱码的字符串呢？那就从源头查起， 我们知道浏览器上的http请求，不管请求体中是什么数据，最终都会转化为二进制，就是所谓的数字信号，然后数电转模电，单纯的数字信号是不能发射的，只能转换成模拟信号，就是我们说的波，发射出去。目标服务器在接收到这个波以后，需要把模拟信号转换成数字信号，就是二进制，然后才能处理这条http请求。数电模电之间的转换是不可能出错的，按照以上理论，我们在服务端拿到的这条请求应该是个二进制流才对，为什么会是乱码的字符串呢，所以，最大的可能就是nextjs处理了这个二进制流，但是没有处理好。所以我们需要拿到原始的二进制流。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getBoundary, parse &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;parse-multipart-data&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handler</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    req: NextApiRequest,</span></span><br><span class=\"line\"><span class=\"params\">    res: NextApiResponse,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">chunks</span>: <span class=\"title class_\">Uint8Array</span>[] = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> size = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sizeLimit = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"function\">(<span class=\"params\">chunk</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        size += chunk.<span class=\"property\">length</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(size &gt; sizeLimit)&#123;</span><br><span class=\"line\">            res.<span class=\"title function_\">status</span>(<span class=\"number\">413</span>).<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;payload too large&#x27;</span>)</span><br><span class=\"line\">            req.<span class=\"property\">connection</span>.<span class=\"title function_\">destroy</span>()</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        chunks.<span class=\"title function_\">push</span>(chunk)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>,<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> boundary = <span class=\"title function_\">getBoundary</span>(req.<span class=\"property\">rawHeaders</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;;&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">const</span> completeBuffer = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">concat</span>(chunks)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parts = <span class=\"title function_\">parse</span>(completeBuffer, boundary)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [file] = parts</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;file.data&#x27;</span>,file.<span class=\"property\">data</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>,<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">        res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;an error occurred&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">api</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">bodyParser</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码一目了然，先禁掉nextjs内置的bodyParser，直接监听req的data与end事件，收集chunk，然后通过getBoundary与parse从formdata中解析出file，这里log出的file.data就是正确的数据，长度是1086938。</p>\n<p>拿到正确的buffer以后就可以调用pdf-parser解析了。</p>\n","categories":[],"tags":[]}