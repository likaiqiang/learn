{"title":"学习react-whether","slug":"学习react-whether","date":"2021-11-21T21:52:20.000Z","updated":"2022-09-22T00:26:55.098Z","comments":true,"path":"api/articles/学习react-whether.json","excerpt":null,"covers":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我们在用react写业务时，常常要处理一些条件逻辑，由于jsx里面只有写表达式，不能写语句，所以有时不得不写一大坨这样的代码。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        isMatch ? <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CommentA</span>/&gt;</span></span> : <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CommentB</span>/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要么像这样把大片逻辑封装成组件，要么写个函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &#123;<span class=\"variable language_\">this</span>.<span class=\"title function_\">renderComponent</span>()&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">renderComponent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMatch ? <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CommentA</span>/&gt;</span></span> : <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CommentB</span>/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两种方法都不完美，有时候并不想凭空写一个方法或者封装组件，并且代码可读性也不好。</p>\n<p>那么有没有更优雅的方法，当然有，所谓前人栽树，后人乘凉，我们只要虚心学习就可以了。</p>\n<p><a href=\"https://github.com/otakustay/react-whether\">react-whether</a> ,看文档可以去这里，本文介绍的是其源码。</p>\n<h1 id=\"源码解读\"><a href=\"#源码解读\" class=\"headerlink\" title=\"源码解读\"></a>源码解读</h1><p>首先打开src&#x2F;index.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Whether</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Whether&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Match</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Match&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Else</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Else&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>从文档可以看出<a href=\"https://github.com/otakustay/react-whether/blob/master/src/Whether.tsx\">Whether</a> 是其root component。</p>\n<p>从代码可以看出Whether本质上是一个函数式组件，除了children，接收matches和context两个prop。</p>\n<p>代码开篇判断matches是不是一个boolean，本质上是在判断有没有传matches，如果matches是个boolean，走的是IfElseMode或者IfMode，否则走的是SwitchMode。</p>\n<p>通过计算Whether的children的数量count，来判断是IfElseMode或者IfMode，如果count &lt;&#x3D; 1,走的是IfMode，如果count &gt; 1 并且chidren的最后一项是else，走的是IfElseMode，否则走的是IfMode。</p>\n<p><a href=\"https://github.com/otakustay/react-whether/blob/master/src/IfMode.tsx\">IfMode</a><br><a href=\"https://github.com/otakustay/react-whether/blob/master/src/IfElseMode.tsx\">IfElseMode</a></p>\n<p>这俩货代码很相似，内部都调用了Render组件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Render</span>&gt;&#123;matches ? children : <span class=\"literal\">null</span>&#125;&lt;<span class=\"regexp\">/Render&gt; /</span><span class=\"regexp\">/IfMode</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;Render&gt;&#123;matches ? ifChildren : elseChildren&#125;&lt;/</span><span class=\"title class_\">Render</span>&gt; <span class=\"comment\">//IfElseMode</span></span><br></pre></td></tr></table></figure>\n\n<p>这是只传matches的情况，接下来看只传context的情况，也就是switchMode</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> matches !== <span class=\"string\">&#x27;boolean&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> elements = <span class=\"title class_\">Children</span>.<span class=\"title function_\">toArray</span>(children) <span class=\"keyword\">as</span> <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">React</span>.<span class=\"property\">ReactElement</span>&lt;<span class=\"built_in\">any</span>&gt;&gt;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> branches = elements.<span class=\"title function_\">map</span>(elementToBranch);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SwitchMode</span> <span class=\"attr\">context</span>=<span class=\"string\">&#123;context&#125;</span> <span class=\"attr\">branches</span>=<span class=\"string\">&#123;branches&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementToBranch = (&#123;<span class=\"keyword\">type</span>, props&#125;: <span class=\"title class_\">React</span>.<span class=\"property\">ReactElement</span>&lt;<span class=\"built_in\">any</span>&gt;): <span class=\"title class_\">MatchProp</span> | <span class=\"function\"><span class=\"params\">BranchPropWithSelector</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"title class_\">Match</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> props;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">selector</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">children</span>: props.<span class=\"property\">children</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>elementToBranch 的作用是整合props与children，生成统一的branches，因为children可能是Match，也可能不是。最后调用SwitchMode组件。</p>\n<p><a href=\"https://github.com/otakustay/react-whether/blob/master/src/SwitchMode.tsx\">SwitchMode</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SwitchMode</span>: <span class=\"title class_\">React</span>.<span class=\"property\">SFC</span>&lt;<span class=\"title class_\">SwitchModeProp</span>&gt; = <span class=\"function\">(<span class=\"params\">&#123;context, branches&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> branch = branches.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">&#123;selector&#125;</span>) =&gt;</span> <span class=\"title function_\">selector</span>(context));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Render</span>&gt;</span>&#123;branch ? branch.children : null&#125;<span class=\"tag\">&lt;/<span class=\"name\">Render</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>代码与ifMode很相似，唯一的区别是多了个branch，这里用find方法很巧妙。假如我代码这么写。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [user,changeUser] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;foo&#x27;</span></span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Whether</span> <span class=\"attr\">context</span>=<span class=\"string\">&#123;user&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">selector</span>=<span class=\"string\">&#123;user</span>=&gt;</span>user.type === &#x27;foo&#x27;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                111</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Match</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">selector</span>=<span class=\"string\">&#123;user</span>=&gt;</span>user.type === &#x27;bar&#x27;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                111</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Match</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Else</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                else</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Else</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Whether</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照elementToBranch的逻辑，假如children的某一项不是Match，会生成返回true的selector函数，但是数组的find方法永远只返回第一个符合条件的值。所以最后一项是不是Else组件根本不重要，写成div也可以，关键是顺序。</p>\n<p>最后看一下三个mode都用到的Render组件。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Render</span>: <span class=\"title class_\">React</span>.<span class=\"property\">SFC</span>&lt;<span class=\"title class_\">RenderProp</span>&gt; = (&#123;children&#125;): <span class=\"title class_\">React</span>.<span class=\"property\">ReactElement</span>&lt;<span class=\"built_in\">any</span>&gt; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span>&#123;isRenderFunc(children) ? children() : children&#125;<span class=\"tag\">&lt;/&gt;</span></span>; <span class=\"comment\">//懒加载的实现</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我们在用react写业务时，常常要处理一些条件逻辑，由于jsx里面只有写表达式，不能写语句，所以有时不得不写一大坨这样的代码。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        isMatch ? <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CommentA</span>/&gt;</span></span> : <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CommentB</span>/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要么像这样把大片逻辑封装成组件，要么写个函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &#123;<span class=\"variable language_\">this</span>.<span class=\"title function_\">renderComponent</span>()&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">renderComponent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMatch ? <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CommentA</span>/&gt;</span></span> : <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CommentB</span>/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两种方法都不完美，有时候并不想凭空写一个方法或者封装组件，并且代码可读性也不好。</p>\n<p>那么有没有更优雅的方法，当然有，所谓前人栽树，后人乘凉，我们只要虚心学习就可以了。</p>\n<p><a href=\"https://github.com/otakustay/react-whether\">react-whether</a> ,看文档可以去这里，本文介绍的是其源码。</p>\n<h1 id=\"源码解读\"><a href=\"#源码解读\" class=\"headerlink\" title=\"源码解读\"></a>源码解读</h1><p>首先打开src&#x2F;index.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Whether</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Whether&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Match</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Match&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Else</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Else&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>从文档可以看出<a href=\"https://github.com/otakustay/react-whether/blob/master/src/Whether.tsx\">Whether</a> 是其root component。</p>\n<p>从代码可以看出Whether本质上是一个函数式组件，除了children，接收matches和context两个prop。</p>\n<p>代码开篇判断matches是不是一个boolean，本质上是在判断有没有传matches，如果matches是个boolean，走的是IfElseMode或者IfMode，否则走的是SwitchMode。</p>\n<p>通过计算Whether的children的数量count，来判断是IfElseMode或者IfMode，如果count &lt;&#x3D; 1,走的是IfMode，如果count &gt; 1 并且chidren的最后一项是else，走的是IfElseMode，否则走的是IfMode。</p>\n<p><a href=\"https://github.com/otakustay/react-whether/blob/master/src/IfMode.tsx\">IfMode</a><br><a href=\"https://github.com/otakustay/react-whether/blob/master/src/IfElseMode.tsx\">IfElseMode</a></p>\n<p>这俩货代码很相似，内部都调用了Render组件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Render</span>&gt;&#123;matches ? children : <span class=\"literal\">null</span>&#125;&lt;<span class=\"regexp\">/Render&gt; /</span><span class=\"regexp\">/IfMode</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;Render&gt;&#123;matches ? ifChildren : elseChildren&#125;&lt;/</span><span class=\"title class_\">Render</span>&gt; <span class=\"comment\">//IfElseMode</span></span><br></pre></td></tr></table></figure>\n\n<p>这是只传matches的情况，接下来看只传context的情况，也就是switchMode</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> matches !== <span class=\"string\">&#x27;boolean&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> elements = <span class=\"title class_\">Children</span>.<span class=\"title function_\">toArray</span>(children) <span class=\"keyword\">as</span> <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">React</span>.<span class=\"property\">ReactElement</span>&lt;<span class=\"built_in\">any</span>&gt;&gt;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> branches = elements.<span class=\"title function_\">map</span>(elementToBranch);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SwitchMode</span> <span class=\"attr\">context</span>=<span class=\"string\">&#123;context&#125;</span> <span class=\"attr\">branches</span>=<span class=\"string\">&#123;branches&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementToBranch = (&#123;<span class=\"keyword\">type</span>, props&#125;: <span class=\"title class_\">React</span>.<span class=\"property\">ReactElement</span>&lt;<span class=\"built_in\">any</span>&gt;): <span class=\"title class_\">MatchProp</span> | <span class=\"function\"><span class=\"params\">BranchPropWithSelector</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"title class_\">Match</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> props;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">selector</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">children</span>: props.<span class=\"property\">children</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>elementToBranch 的作用是整合props与children，生成统一的branches，因为children可能是Match，也可能不是。最后调用SwitchMode组件。</p>\n<p><a href=\"https://github.com/otakustay/react-whether/blob/master/src/SwitchMode.tsx\">SwitchMode</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SwitchMode</span>: <span class=\"title class_\">React</span>.<span class=\"property\">SFC</span>&lt;<span class=\"title class_\">SwitchModeProp</span>&gt; = <span class=\"function\">(<span class=\"params\">&#123;context, branches&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> branch = branches.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">&#123;selector&#125;</span>) =&gt;</span> <span class=\"title function_\">selector</span>(context));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Render</span>&gt;</span>&#123;branch ? branch.children : null&#125;<span class=\"tag\">&lt;/<span class=\"name\">Render</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>代码与ifMode很相似，唯一的区别是多了个branch，这里用find方法很巧妙。假如我代码这么写。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [user,changeUser] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;foo&#x27;</span></span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Whether</span> <span class=\"attr\">context</span>=<span class=\"string\">&#123;user&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">selector</span>=<span class=\"string\">&#123;user</span>=&gt;</span>user.type === &#x27;foo&#x27;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                111</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Match</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">selector</span>=<span class=\"string\">&#123;user</span>=&gt;</span>user.type === &#x27;bar&#x27;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                111</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Match</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Else</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                else</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Else</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Whether</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照elementToBranch的逻辑，假如children的某一项不是Match，会生成返回true的selector函数，但是数组的find方法永远只返回第一个符合条件的值。所以最后一项是不是Else组件根本不重要，写成div也可以，关键是顺序。</p>\n<p>最后看一下三个mode都用到的Render组件。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Render</span>: <span class=\"title class_\">React</span>.<span class=\"property\">SFC</span>&lt;<span class=\"title class_\">RenderProp</span>&gt; = (&#123;children&#125;): <span class=\"title class_\">React</span>.<span class=\"property\">ReactElement</span>&lt;<span class=\"built_in\">any</span>&gt; =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span>&#123;isRenderFunc(children) ? children() : children&#125;<span class=\"tag\">&lt;/&gt;</span></span>; <span class=\"comment\">//懒加载的实现</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":[],"tags":[]}